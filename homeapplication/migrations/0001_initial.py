# Generated by Django 4.0.5 on 2023-08-28 08:29

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BackQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('content', models.TextField(verbose_name='内容')),
                ('user_id', models.IntegerField(verbose_name='用户ID')),
            ],
            options={
                'verbose_name': '回帖表',
                'verbose_name_plural': '回帖表',
                'db_table': 'sof_back_question',
            },
        ),
        migrations.CreateModel(
            name='FollowQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('content', models.TextField(verbose_name='内容')),
                ('user_id', models.IntegerField(verbose_name='用户ID')),
                ('upvotes', models.IntegerField(default=0, verbose_name='赞成数')),
                ('downvotes', models.IntegerField(default=0, verbose_name='反对数')),
                ('question_id', models.IntegerField(verbose_name='问题ID')),
            ],
            options={
                'verbose_name': '跟帖表',
                'verbose_name_plural': '跟帖表',
                'db_table': 'sof_follow_question',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('title', models.CharField(max_length=100, verbose_name='标题')),
                ('content', models.TextField(verbose_name='内容')),
                ('user_id', models.IntegerField(verbose_name='作者ID')),
                ('tag_id', models.IntegerField(verbose_name='标签ID')),
            ],
            options={
                'verbose_name': '问题表',
                'verbose_name_plural': '问题表',
                'db_table': 'sof_question',
            },
        ),
        migrations.CreateModel(
            name='TagsQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('tag', models.CharField(max_length=25, verbose_name='标签名称')),
            ],
            options={
                'verbose_name': '问题标签表',
                'verbose_name_plural': '问题标签表',
                'db_table': 'sof_tags_question',
            },
        ),
        migrations.CreateModel(
            name='UserImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField(db_index=True, unique=True, verbose_name='用户ID')),
                ('image', models.BinaryField(verbose_name='用户头像')),
            ],
            options={
                'verbose_name': '用户头像表',
                'verbose_name_plural': '用户头像表',
                'db_table': 'sof_user_images',
            },
        ),
        migrations.CreateModel(
            name='UserViewQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('user_id', models.IntegerField(verbose_name='用户ID')),
                ('question_id', models.IntegerField(verbose_name='帖子ID')),
            ],
            options={
                'verbose_name': '用户问题表',
                'verbose_name_plural': '用户问题表',
                'db_table': 'sof_user_question',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('question_count', models.IntegerField(default=0, verbose_name='发帖数')),
                ('back_question', models.IntegerField(default=0, verbose_name='回帖数')),
                ('follow_question', models.IntegerField(default=0, verbose_name='跟帖数')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户表',
                'verbose_name_plural': '用户表',
                'db_table': 'sof_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
